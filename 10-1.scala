import com.sun.tools.classfile.TypeAnnotation.Position

object Main extends App {
  val input: Seq[List[Char]] = "....#...####.#.#...........#........\n#####..#.#.#......#####...#.#...#...\n##.##..#.#.#.....#.....##.#.#..#....\n...#..#...#.##........#..#.......#.#\n#...##...###...###..#...#.....#.....\n##.......#.....#.........#.#....#.#.\n..#...#.##.##.....#....##..#......#.\n..###..##..#..#...#......##...#....#\n##..##.....#...#.#...#......#.#.#..#\n...###....#..#.#......#...#.......#.\n#....#...##.......#..#.......#..#...\n#...........#.....#.....#.#...#.##.#\n###..#....####..#.###...#....#..#...\n##....#.#..#.#......##.......#....#.\n..#.#....#.#.#..#...#.##.##..#......\n...#.....#......#.#.#.##.....#..###.\n..#.#.###.......#..#.#....##.....#..\n.#.#.#...#..#.#..##.#..........#...#\n.....#.#.#...#..#..#...###.#...#.#..\n#..#..#.....#.##..##...##.#.....#...\n....##....#.##...#..........#.##....\n...#....###.#...##........##.##..##.\n#..#....#......#......###...........\n##...#..#.##.##..##....#..#..##..#.#\n.#....#..##.....#.#............##...\n.###.........#....#.##.#..#.#..#.#..\n#...#..#...#.#.#.....#....#......###\n#...........##.#....#.##......#.#..#\n....#...#..#...#.####...#.#..#.##...\n......####.....#..#....#....#....#.#\n.##.#..###..####...#.......#.#....#.\n#.###....#....#..........#.....###.#\n...#......#....##...##..#..#...###..\n..#...###.###.........#.#..#.#..#...\n.#.#.............#.#....#...........\n..#...#.###...##....##.#.#.#....#.#.".split("\n").toList.map(_.toList)

  def analyze(position: (Int, Int)) = {
    input.zipWithIndex.foldLeft(List.empty[Double]) {
      case (slopes, (row, y)) =>
        row.zipWithIndex.filter(cx => cx._1 == '#').map(_._2).foldLeft(slopes) {
          case (slopes, x) if position == (y, x) => slopes
          case (slopes, x) =>
            val slope = Math.atan2(position._2-y, position._1-x)

            if (slopes.contains(slope)) {
              slopes
            } else {
              slopes :+ slope
            }
        }
    }
  }

  val result = for {
    x <- input.head.indices
    y <- input.indices
  } yield {
    input(y)(x) match {
      case '.' => ((y,x), -1)
      case '#' => val result = analyze((x,y))
        ((x,y), result.length)
      case _ => throw new RuntimeException("Invalid character")
    }
  }

  print(result.maxBy(_._2))
}
