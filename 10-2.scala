import com.sun.tools.classfile.TypeAnnotation.Position

object Main extends App {
  val input: Seq[List[Char]] = "....#...####.#.#...........#........\n#####..#.#.#......#####...#.#...#...\n##.##..#.#.#.....#.....##.#.#..#....\n...#..#...#.##........#..#.......#.#\n#...##...###...###..#...#.....#.....\n##.......#.....#.........#.#....#.#.\n..#...#.##.##.....#....##..#......#.\n..###..##..#..#...#......##...#....#\n##..##.....#...#.#...#......#.#.#..#\n...###....#..#.#......#...#.......#.\n#....#...##.......#..#.......#..#...\n#...........#.....#.....#.#...#.##.#\n###..#....####..#.###...#....#..#...\n##....#.#..#.#......##.......#....#.\n..#.#....#.#.#..#...#.##.##..#......\n...#.....#......#.#.#.##.....#..###.\n..#.#.###.......#..#.#....##.....#..\n.#.#.#...#..#.#..##.#..........#...#\n.....#.#.#...#..#..#...###.#...#.#..\n#..#..#.....#.##..##...##.#.....#...\n....##....#.##...#..........#.##....\n...#....###.#...##........##.##..##.\n#..#....#......#......###...........\n##...#..#.##.##..##....#..#..##..#.#\n.#....#..##.....#.#............##...\n.###.........#....#.##.#..#.#..#.#..\n#...#..#...#.#.#.....#....#......###\n#...........##.#....#.##......#.#..#\n....#...#..#...#.####...#.#..#.##...\n......####.....#..#....#....#....#.#\n.##.#..###..####...#.......#.#....#.\n#.###....#....#..........#.....###.#\n...#......#....##...##..#..#...###..\n..#...###.###.........#.#..#.#..#...\n.#.#.............#.#....#...........\n..#...#.###...##....##.#.#.#....#.#.".split("\n").toList.map(_.toList)
  case class Asteroid(position: (Int, Int), distance: Double, arc: Double)

  def analyze(position: (Int, Int)) = {
    input.zipWithIndex.foldLeft(List.empty[Asteroid]) {
      case (asteroids, (row, y)) =>
        row.zipWithIndex.filter(cx => cx._1 == '#').map(_._2).foldLeft(asteroids) {
          case (asteroids, x) if position == (y, x) => asteroids
          case (asteroids, x) =>
            val arc = Math.atan2(position._2-y, position._1-x)
            val distance = Math.sqrt((position._1-x)*(position._1-x) + (position._2-y)*(position._2-y))

            asteroids :+ Asteroid((y, x), distance, arc)
        }
    }
  }



  print(analyze((x,y)))
}
